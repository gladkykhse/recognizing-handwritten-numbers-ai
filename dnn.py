# -*- coding: utf-8 -*-
"""Programming 1 Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JQiTZBNnc3PBpfqxaFapVQ3HAHIpsHQL
"""

import tensorflow as tf
import matplotlib.pyplot as plt
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Example of showing images from the MNIST DATASET

# image_index = 100
# print(y_train[image_index])
# print(x_train.shape)
# plt.imshow(x_train[image_index], cmap='Greys')

# We need to reshape our array, bcs Keras API requires 4-dimensional NumPy array
x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
input_shape = (28, 28, 1)

# Converting values to float32
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

# Changing the range of values from [0,255] to [0,1]
x_train /= 255
x_test /= 255

print('x_train shape:', x_train.shape)
print('Number of images in x_train', x_train.shape[0])
print('Number of images in x_test', x_test.shape[0])

# Importing the required Keras modules
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D

# Creating a sequential model
def createModel():
  m = Sequential()
  m.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape, activation='relu', padding = 'same'))
  m.add(MaxPooling2D(pool_size=(2, 2)))

  m.add(Conv2D(14, (3, 3), padding='same', activation='relu'))
  m.add(MaxPooling2D(pool_size=(2, 2)))
  m.add(Dropout(0.2))
  
  m.add(Conv2D(7, (3, 3), padding='same', activation='relu'))
  m.add(MaxPooling2D(pool_size=(2, 2)))
  m.add(Dropout(0.2))

  m.add(Flatten()) # Flattening the 2D arrays for fully connected layers
  m.add(Dense(128, activation=tf.nn.relu))
  m.add(Dropout(0.2))
  m.add(Dense(10,activation=tf.nn.softmax))
  return m
model = createModel()

# Optimizing and compiling the created model
model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])
model.fit(x=x_train,y=y_train, epochs=10)

# Evaluating the results
model.evaluate(x_test, y_test)

image_index = 1234
plt.imshow(x_test[image_index].reshape(28, 28),cmap='Greys')
prediction = model.predict(x_test[image_index].reshape(1, 28, 28, 1))
print(prediction.argmax())

# ----- Testing -----

# import numpy as np
# import cv2
# import matplotlib.pyplot as plt

# image = cv2.imread('1.png', 0)  
# image = 1 - (image / 255.0)

# image = image.astype('float32')
# plt.imshow(image, cmap='Greys')

# prediction = model.predict(image.reshape(1, 28, 28, 1))
# print(prediction.argmax())


# ----- Model Saving -----

# model.save("model")
# !zip model